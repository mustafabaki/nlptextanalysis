# -*- coding: utf-8 -*-
"""NLPTR_WIKI_99.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K7ewTnf_KLV8bFq_1KeS6HEVrXShOcdE

# Import Data and Libraries
"""

import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/turkish_wikipedia_dump_20200401.csv')

data.head()

df=data['text']
df

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import nltk
import re
import warnings
from collections import Counter
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
import nltk
nltk.download('stopwords')
WPT = nltk.WordPunctTokenizer()
stop_word_list = nltk.corpus.stopwords.words('turkish')

!pip install gensim
import gensim
from gensim.utils import simple_preprocess
#from gensim.parsing.preprocessing import STOPWORDS           #Does not support Turkish yet.
from nltk.stem import WordNetLemmatizer, SnowballStemmer
from nltk.stem.porter import *
import numpy as np
np.random.seed(400)

import nltk
nltk.download('wordnet')

import pandas as pd
from snowballstemmer import TurkishStemmer
stemmer=TurkishStemmer()

"""# Tokenizing and Stemmin Functions"""

def lemmatize_stemming(text):
    return stemmer.stemWord(text)       #lemmitize was removed because it is not working in turkish

# Tokenize and lemmatize
def preprocess(text):
    result=[]
    for token in gensim.utils.simple_preprocess(text) :
        if token not in stop_word_list and len(token) > 3:
            result.append(lemmatize_stemming(token))
     
    return result

"""# Data Cleaning"""

import pprint
data['text'].fillna('').astype(str)
df=data['text']
df.astype(str)
print(df)
df = df.astype(str) 
df = df.map(lambda x: re.sub('[,\.!?();:$%&#"]', '', x))
df = df.replace('\n','', regex=True)
df = df.replace('\'','', regex=True)
df = df.replace('-','', regex=True)
df = df.replace('’','', regex=True)
df[0]

import pprint
word_count = Counter(" ".join(df).split()).most_common(100)
word_frequency = pd.DataFrame(word_count, columns = ['Word', 'Frequency'])
print(word_frequency)

"""**Stopword List**"""

stp = pd.read_csv('/content/drive/MyDrive/stopwords.csv')
stop_word_list.extend(stp['stopwords'])
stop_word_list

processed_docs = []
!pip install progressbar2
from progressbar import ProgressBar
bar = ProgressBar()

for doc in bar(df):
    processed_docs.append(preprocess(doc))

"""# Dictionary"""

dictionary = gensim.corpora.Dictionary(processed_docs)

count = 0                         #Testing if it is created
for k, v in dictionary.iteritems():
    print(k, v)
    count += 1
    if count > 10:
        break

'''
Remove very rare and very common words: (Probably not working for Turkish but I tried)
'''
dictionary.filter_extremes(no_below=15, no_above=0.1, keep_n= 100000)

'''
Create the Bag-of-words model for each document i.e for each document we create a dictionary reporting how many
words and how many times those words appear. Save this to 'bow_corpus'
'''
bow_corpus = [dictionary.doc2bow(doc) for doc in processed_docs]

'''
Preview BOW for our sample preprocessed document
'''
document_num = 20
bow_doc_x = bow_corpus[document_num]

for i in range(len(bow_doc_x)):
    print("Word {} (\"{}\") appears {} time.".format(bow_doc_x[i][0], 
                                                     dictionary[bow_doc_x[i][0]], 
                                                     bow_doc_x[i][1]))

"""# Saving Corpus and Dictionary"""

import pickle
pickle.dump(bow_corpus, open('/content/drive/MyDrive/aaa/corpus_full_data.pkl', 'wb'))
dictionary.save('/content/drive/MyDrive/aaa/dictionary_full_data.gensim')

"""# LDA Model


"""

lda_model =  gensim.models.LdaMulticore(bow_corpus, 
                                   num_topics = 99, 
                                   id2word = dictionary,                                    
                                   passes = 10,
                                   workers = 2)

'''
For each topic, we will explore the words occuring in that topic and its relative weight
'''
for idx, topic in lda_model.print_topics(-1):
    print("Topic: {} \nWords: {}".format(idx, topic ))
    print("\n")
lda_model.save('/content/drive/MyDrive/model_99_topic.gensim')

"""# Testing Unseen Text"""

unseen_document = "Farklı tarzda bir şey izlemek istersen Tarantino'nun yapıtlarına bakabilirsin. Aldığı ödülleri gerçekten de hak ediyor."
unseen_document = re.sub(r'[^\w\s]','',unseen_document)

unseen_sentence=""
for i in unseen_document.split():
  if (i not in stop_word_list and len(i)>=3):
    i=lemmatize_stemming(i)
    unseen_sentence=unseen_sentence+" "+i
  else:
    pass
print(unseen_sentence)

# Data preprocessing step for the unseen document
bow_vector = dictionary.doc2bow(preprocess(unseen_sentence))

for index, score in sorted(lda_model[bow_vector], key=lambda tup: -1*tup[1]):
    if(score>0.1):
      print("Score: {}\t Topic: {}".format(score, lda_model.print_topic(index, 100)))
