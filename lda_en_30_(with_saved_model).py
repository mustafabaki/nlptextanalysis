# -*- coding: utf-8 -*-
"""LDA Wiki 70 (With Saved Model).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VMwG7TOaRj7OaX18nlV0aLQqa02x1u0G
"""

!pip install gensim
import gensim
from gensim.utils import simple_preprocess
import spacy
!pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.2.0/en_core_web_sm-2.2.0.tar.gz
import pandas as pd
import re
import pickle
import pandas as pd
from nltk.stem.snowball import SnowballStemmer
import nltk
stemmer=SnowballStemmer('english')
nltk.download('stopwords')
WPT = nltk.WordPunctTokenizer()
dictionary = gensim.corpora.Dictionary.load('/content/drive/MyDrive/lda eng /lda_eng_dictionary.gensim')
corpus = pickle.load(open('/content/drive/MyDrive/lda eng /lda_eng_corpus.pkl', 'rb'))
lda = gensim.models.ldamodel.LdaModel.load('/content/drive/MyDrive/lda eng /lda_eng_model.gensim')
stop_word_list = nltk.corpus.stopwords.words('english')


def lemmatize_stemming(text):
    return stemmer.stem(text)

def preprocess(text):
    result=[]
    for token in gensim.utils.simple_preprocess(text) :
        if token not in stop_word_list and len(token) > 3:
            result.append(lemmatize_stemming(token))
     
    return result


unseen_document = [""" India's states should declare an epidemic following a rise in deadly "black fungus" cases, the country's health authorities has said.

The normally rare infection, called mucormycosis, has a mortality rate of 50%, with some only saved by removing an eye or jaw bone.

But in recent months, India saw thousands of cases affecting recovered and recovering Covid-19 patients.

Doctors suspect there may be a link with the steroids used to treat Covid.

Diabetics are at particular risk, with doctors telling the BBC it seems to strike 12 to 15 days after recovery from Covid.

The deadly 'black fungus' maiming Covid patients
India's holiest river is swollen with bodies
Six hospitals, three days and a Covid nightmare
On Thursday, Health Ministry Joint Secretary Lav Agarwal wrote to India's 29 states to ask them to declare it an epidemic.

By doing so, the ministry will be able more closely to monitor what is happening in each state, and allow for better integration of treatment.

It is not clear exactly how many cases there have been across the country, which is currently in the grip of a deadly second Covid-19 wave which has left tens of thousands dead.  """]

df = pd.DataFrame(unseen_document,columns=['text'])
docs = df['text']
docs = docs.map(lambda x: re.sub('[,\.\'!?();:$%&#"]', ' ', x))
docs = docs.map(lambda x: x.lower())
docs = docs.map(lambda x: x.strip())
#stopword'leri kaldırıyoruz buradaki fonksiyon ile (Gereksiz sözcükler çünkü)
def token(values):
    filtered_words = [word for word in values.split() if word not in stop_word_list]
    
    not_stopword_doc = " ".join(filtered_words)
    return not_stopword_doc
docs = docs.map(lambda x: token(x))
df = docs

data=[]
data.append(preprocess(df[0]))

bigram = gensim.models.Phrases(data, min_count=5, threshold=100)
trigram = gensim.models.Phrases(bigram[data], threshold=100)  

bigram_mod = gensim.models.phrases.Phraser(bigram)
trigram_mod = gensim.models.phrases.Phraser(trigram)



def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]

def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

data_words_trigrams = make_trigrams(data)

nlp = spacy.load('en_core_web_sm', disable=['parser', 'ner'])


data_lemmatized = lemmatization(data_words_trigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

bow_vector = dictionary.doc2bow(data_lemmatized[0])

count=0
for index, score in sorted(lda[bow_vector], key=lambda tup: -1*tup[1]):
    count+=1
    if(count<6):
      print("Score: %{}\t Topic: {}".format(score*100, re. findall('"([^"]*)"', lda.print_topic(index, 10))))